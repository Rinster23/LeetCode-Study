# &与：两个是1才是1
# |或：只要有一个是1就是1
# ^异或：相同是0
# ~取反：0变1，1变0


# 对于强类型语言
# 假设都是8bits
#  0000_0011
# &0000_0101
# =0000_0001
# 即结果是十进制的1
print(3 & 5)
#  0000_0011
# |0000_0101
# =0000_0111
# 即结果是十进制的7
print(3 | 5)
#  0000_0011
# ^0000_0101
# =0000_0110
# 即十进制的6
print(3 ^ 5)
# 左移运算 <<
# 左移运算符 m << n 表示把 m 左移 n 位。在左移 n 位的时候，最左边的 n 位将被丢弃，同时在最右边补上 n 个 0
# 右移运算 >>
# 右移运算符 m >> n 表示把 m 右移 n 位。在右移 n 位的时候，最右边的 n 位将被丢弃。
# 如果数字是一个无符号树值，则用 0 填补最左边的 n 位；如果数字是一个有符号数值，则用数字的符号位填补最左边的 n 位。也就是说，如果数字原先是一个正数，则右移之后在最左边补 n 个 0 ；如果数字原先是负数，则右移之后在最左边补 n 个 1 。


print(bin(11))  # 0b1011
print(bin(11 << 2))  # 44
print(bin(11 >> 2))  # 0b10
print(bin(-11))  # -0b1011
print(bin(-11 << 2))  # -44
print(bin(-11 >> 3))  # -0b11 结果有点不一样


